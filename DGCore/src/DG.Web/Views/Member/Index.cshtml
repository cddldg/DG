@{
    ViewBag.Title = "会员";
}

<table id="mytable" class="layui-table" lay-filter="myfilter"></table>
<script type="text/html" id="mybar">
    <div class="layui-btn-group">
        <button class="layui-btn layui-btn-small" lay-event="detail">
            <i class="layui-icon">&#xe60a;</i>
        </button>
        <button class="layui-btn layui-btn-small" lay-event="edit">
            <i class="layui-icon">&#xe642;</i>
        </button>
        <button class="layui-btn layui-btn-small layui-btn-danger" lay-event="del">
            <i class="layui-icon">&#xe640;</i>
        </button>
    </div>
</script>
@section Scripts{ 
<script>
    layui.use(['token','layer', 'table', 'element'], function () {
        var layer = layui.layer //弹层
        var table = layui.table //表格
        var element = layui.element; //元素操作
        var token = layui.token;
        var $ = layui.jquery;
        /*执行渲染*/
        table.render({
            elem: '#mytable',
            url: '/api/Member/GetPager',
            token: token.gettoken(),//记得升级要修改table.js源码ajax加 headers: { Authorization: n.token || "Bearer " }
            method:'get',
            request: {
                pageName: 'pageIndex', //页码的参数名称，默认：page
                limitName: 'pageSize' //每页数据量的参数名，默认：limit
            },
            response: {
                statusName: 'IsError' //数据状态的字段名称，默认：code
                , statusCode: 0 //成功的状态码，默认：0
                , msgName: 'ErrorMessage' //状态信息的字段名称，默认：msg
                , countName: 'Count' //数据总数的字段名称，默认：count
                , dataName: 'Data' //数据列表的字段名称，默认：data
            },    
            //where: {
            //    //Authorization: "Bearer jjtoken"
            //},
            height: 'full-84',
            even: true,
            initSort: {
                field: 'Name', //排序字段，对应 cols 设定的各字段名
                type: 'asc' //排序方式  asc: 升序、desc: 降序、null: 默认排序
            },
            page: true,
            loading: true,
            limits: [10, 20, 50, 100, 300],
            limit: 10,
            id: 'datatable',
            cols: [[
                { checkbox: true },
                { field: 'ID', title: 'ID', width: 200 },
                { field: 'Name', title: '用户名', width: 100, sort: true },
                { field: 'Mobile', title: '手机号码', width: 120 },
                { field: 'CreateTime', title: '创建时间', width: 200 },
                { field: 'UpdateTime', title: '最后更新时间', width: 200 },
                { field: 'IsDeleted', title: '是否删除', width: 100 },
                { fixed: 'right', title: '操作', width: 160, align: 'center', toolbar: '#mybar' } //这里的toolbar值是模板元素的选择器
            ]]
        });
        /*监听复选框*/
        table.on('checkbox(myfilter)', function (obj) {
            var checkStatus = table.checkStatus('datatable'); //test即为基础参数id对应的值
            //layer.msg(obj.data ? obj.data.ID : obj.type);
        });
        /*监听工具条*/
        table.on('tool(myfilter)', function (obj) { //注：tool是工具条事件名，test是table原始容器的属性 lay-filter="对应的值"
            var data = obj.data //获得当前行数据
                , layEvent = obj.event; //获得 lay-event 对应的值
            if (layEvent === 'detail') {
                layer.msg('查看操作:' + data.Name);
            } else if (layEvent === 'del') {
                layer.confirm('真的删除行么:' + data.Name, function (index) {
                    obj.del(); //删除对应行（tr）的DOM结构
                    layer.close(index);
                    //向服务端发送删除指令
                });
            } else if (layEvent === 'edit') {
                 
                    layer.open({
                        type: 2 //此处以iframe举例
                        , skin: 'demo-class'
                        , title: '添加Member'
                        , area: ['1000px', '800px']
                        , shade: 0
                        , maxmin: true

                        , content: '/Member/Create'
                        , btn: ['关闭']
                        , yes: function () {
                            layer.closeAll();
                        }
                        ,resize:true

                        , zIndex: layer.zIndex //重点1
                        , success: function (layero) {
                            layer.setTop(layero); //重点2
                        }
                    });
                
                
            }
        });
        /*监听排序*/
        table.on('sort(myfilter)', function (obj) { //注：tool是工具条事件名，test是table原始容器的属性 lay-filter="对应的值"
            if (!obj.type) { obj.type = "desc"; }
            table.reload('datatable', {
                initSort: obj //记录初始排序，如果不设的话，将无法标记表头的排序状态。
                , where: { //请求参数
                    orderby: obj.field + " " + obj.type  //排序字段
                }
            });
        });
    });
</script>
}


